name: Release BETA Open Workflow

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch you want to release.'
        required: true
      version:
        description: 'The version you want to release.'
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build and Test
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
      
      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

  draft-new-release:
    name: "Draft a new release"
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize mandatory git config
        run: |
          git config user.email "ci-executor@github.com"
          git config user.name "GitHub Action"
          
      - name: Create release branch
        run: git checkout -b release/${{ github.event.inputs.version }} ${{ github.event.inputs.branch }}

      - name: Push new branch
        run: git push origin release/${{ github.event.inputs.version }}

      - name: Create pull request
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: release/${{ github.event.inputs.version }}
          base: main
          title: Release version ${{ github.event.inputs.version }}
          reviewers: ${{ github.actor }} # By default, we request a review from the person who triggered the workflow.
          # Write a nice message to the user.
          # We are claiming things here based on the `publish-new-release.yml` workflow.
          # You should obviously adopt it to say the truth depending on your release workflow :)
          body: |
            Hi @${{ github.actor }}!
            
            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.
            I've updated the changelog and bumped the versions in the manifest files in this commit: ${{ steps.make-commit.outputs.commit }}.
            
            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.

  build-and-deploy-android:
    needs: draft-new-release
    environment: beta
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Nécessaire pour récupérer tous les tags
          ref: release/${{ github.event.inputs.version }}

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
          rubygems: latest

      - name: Install Firebase CLI
        uses: pocket-apps/action-setup-firebase@v2
        with:
          firebase-token: ${{ secrets.FIREBASE_TOKEN }}

      - name: Generate Firebase options
        run: |
          flutter pub global activate flutterfire_cli
          flutterfire configure --project=$FIREBASE_PROJECT_ID --android-package-name=$ANDROID_PACKAGE_NAME --ios-bundle-id=$IOS_BUNDLE_ID --macos-bundle-id=nothing --web-app-id=nothing --windows-app-id=nothing --platforms=android --yes
        shell: bash
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
          ANDROID_PACKAGE_NAME: ${{ secrets.DEVELOPER_APP_IDENTIFIER }}

      - name: Setup Android release key
        run: |
          echo ${{ secrets.KEY_BASE_64 }} | base64 --decode > android/app/key.jks
          echo keyPassword=\${{ secrets.KEY_PASSWORD }} > android/key.properties
          echo storePassword=\${{ secrets.STORE_PASSWORD }} >> android/key.properties
          echo keyAlias=\${{ secrets.KEY_ALIAS }} >> android/key.properties
        shell: bash

      - name: Setup PlayStore service account
        run: |
          echo ${{ secrets.PLAYSTORE_SERVICE_ACCOUNT_BASE_64 }} | base64 --decode > android/playstore-service-account.json
        shell: bash

      - name: Deploy Android Beta to PlayStore via Fastlane
        uses: maierj/fastlane-action@v1.4.0
        with:
          lane: beta
          subdirectory: android

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: weather_assistant.aab
          path: build/app/outputs/bundle/release/app-release.aab

  build-and-deploy-ios:
    needs: draft-new-release
    environment: beta
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: macos-13
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Nécessaire pour récupérer tous les tags
          ref: release/${{ github.event.inputs.version }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
          rubygems: latest

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}

      - name: Download AppleAuthKey and GCloud KeyFile Json from GCP bucket
        run: |
          gsutil cp gs://'${{ secrets.GOOGLE_CLOUD_BUCKET_NAME }}'/'${{ secrets.APPLE_AUTH_KEY_FILENAME }}' ./ios/'${{ secrets.APPLE_AUTH_KEY_FILENAME }}'
          gsutil cp gs://'${{ secrets.GOOGLE_CLOUD_BUCKET_NAME }}'/'${{ secrets.GOOGLE_CLOUD_KEY_FILENAME }}' ./ios/'${{ secrets.GOOGLE_CLOUD_KEY_FILENAME }}'
          ls

      - name: Install Setup AppStore files
        run: |
          flutter pub get
          cd ios
          pod cache clean --all
          bundle install
          bundle exec pod install
        shell: bash

      - name: Install Firebase CLI
        uses: pocket-apps/action-setup-firebase@v2
        with:
          firebase-token: ${{ secrets.FIREBASE_TOKEN }}

      - name: Generate Firebase options
        run: |
          flutter pub global activate flutterfire_cli
          flutterfire configure --project=$FIREBASE_PROJECT_ID --android-package-name=$ANDROID_PACKAGE_NAME --ios-bundle-id=$IOS_BUNDLE_ID --macos-bundle-id=nothing --web-app-id=nothing --windows-app-id=nothing --platforms=ios --yes
        shell: bash
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
          IOS_BUNDLE_ID: ${{ secrets.DEVELOPER_APP_IDENTIFIER }}

      - name: Deploy iOS Beta to TestFlight via Fastlane
        uses: maierj/fastlane-action@v1.4.0
        with:
          lane: beta
          subdirectory: ios
        env:
          DEVELOPER_APP_IDENTIFIER: "${{ secrets.DEVELOPER_APP_IDENTIFIER }}"
          APPLE_DEVELOPER_USERNAME: "${{ secrets.APPLE_DEVELOPER_USERNAME }}"
          APPLE_AUTH_KEY_ID: "${{ secrets.APPLE_AUTH_KEY_ID }}"
          APPLE_AUTH_ISSUER_ID: "${{ secrets.APPLE_AUTH_ISSUER_ID }}"
          APPLE_AUTH_KEY_PATH: "${{ secrets.APPLE_AUTH_KEY_PATH }}"
          FASTLANE_APPLE_ID: "${{ secrets.FASTLANE_APPLE_ID }}"
          APP_STORE_CONNECT_TEAM_ID: "${{ secrets.APP_STORE_CONNECT_TEAM_ID }}"
          DEVELOPER_PORTAL_TEAM_ID: "${{ secrets.DEVELOPER_PORTAL_TEAM_ID }}"
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: "${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}"
          MATCH_KEYCHAIN_PASSWORD: "${{ secrets.MATCH_KEYCHAIN_PASSWORD }}"
          GOOGLE_CLOUD_BUCKET_NAME: "${{ secrets.GOOGLE_CLOUD_BUCKET_NAME }}"
          GOOGLE_CLOUD_PROJECT_ID: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: weather_assistant.ipa
          path: build/ios/ipa/weather_assistant.ipa
